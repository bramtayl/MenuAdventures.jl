var documenterSearchIndex = {"docs":
[{"location":"#Interface","page":"Interface","title":"Interface","text":"","category":"section"},{"location":"","page":"Interface","title":"Interface","text":"Modules = [MenuAdventures]","category":"page"},{"location":"","page":"Interface","title":"Interface","text":"Modules = [MenuAdventures]","category":"page"},{"location":"#MenuAdventures.AbstractDoor","page":"Interface","title":"MenuAdventures.AbstractDoor","text":"An abstract door\n\n\n\n\n\n","category":"type"},{"location":"#MenuAdventures.AbstractRoom","page":"Interface","title":"MenuAdventures.AbstractRoom","text":"abstract type AbstractRoom <: Location end\n\nMust have a mutable visited field.\n\n\n\n\n\n","category":"type"},{"location":"#MenuAdventures.Action","page":"Interface","title":"MenuAdventures.Action","text":"abstract type Action end\n\nA action is an action the player can take.\n\nIt should be fairly easy to create new verbs: you will need to define \n\never_possible for abstract possibilities,\npossible_now for concrete possibilities,\nargument_domains to specify the domain of the arguments\nprint_sentence for printing the sentence. Note that the order arguments are printed need not match the order they are listed.\n\nMost importantly, define:\n\nfunction (::MyNewAction)(universe, arguments...) -> Bool\n\nWhich will conduct the action based on user choices.  Return true to end the game.\n\n\n\n\n\n","category":"type"},{"location":"#MenuAdventures.Answer","page":"Interface","title":"MenuAdventures.Answer","text":"mutable struct Answer\n\nAn answer has to fields: text, which will be how the option is displayed in a menu, and object. object might be a noun, direction, trigger, or even another Question.\n\n\n\n\n\n","category":"type"},{"location":"#MenuAdventures.Attach","page":"Interface","title":"MenuAdventures.Attach","text":"struct Attach <: Action end\n\nAttach something from your Inventory to something else Reachable.\n\n\n\n\n\n","category":"type"},{"location":"#MenuAdventures.Close","page":"Interface","title":"MenuAdventures.Close","text":"struct Close <: Action end\n\nClose something Reachable.\n\n\n\n\n\n","category":"type"},{"location":"#MenuAdventures.Dialog","page":"Interface","title":"MenuAdventures.Dialog","text":"struct Dialog <: Domain end\n\nThings a player might say.\n\n\n\n\n\n","category":"type"},{"location":"#MenuAdventures.Direction","page":"Interface","title":"MenuAdventures.Direction","text":"@enum Direction north south west east north_west north_east south_west south_east up down inside outside\n\nDirections show the relationships between Locations.\n\nYou can use opposite to find the opposite of a direction.\n\n\n\n\n\n","category":"type"},{"location":"#MenuAdventures.Domain","page":"Interface","title":"MenuAdventures.Domain","text":"abstract type Domain end\n\nA domain refers to a search space for a specific argument to an Action.\n\nFor example, you are only able to look at things in the Visible domain. Domains serve both as a way of distinguishing different arguments to an action, and also, categorizing the environment around the player. Users could theoretically add a new domain.\n\n\n\n\n\n","category":"type"},{"location":"#MenuAdventures.Dress","page":"Interface","title":"MenuAdventures.Dress","text":"struct Dress <: Action end\n\nDress someone Reachable in something from your Inventory.\n\n\n\n\n\n","category":"type"},{"location":"#MenuAdventures.Drop","page":"Interface","title":"MenuAdventures.Drop","text":"struct Drop <: Action end\n\nDrop something from your Inventory.\n\n\n\n\n\n","category":"type"},{"location":"#MenuAdventures.Eat","page":"Interface","title":"MenuAdventures.Eat","text":"struct Eat <: Action end\n\nEat something Reachable.\n\n\n\n\n\n","category":"type"},{"location":"#MenuAdventures.ExitDirections","page":"Interface","title":"MenuAdventures.ExitDirections","text":"struct ExitDirections <: Domain end\n\nDirections that a player, or the vehicle a player is in, might exit in.\n\n\n\n\n\n","category":"type"},{"location":"#MenuAdventures.Give","page":"Interface","title":"MenuAdventures.Give","text":"struct Give <: Action end\n\nGive something from your Inventory to someone Reachable.\n\n\n\n\n\n","category":"type"},{"location":"#MenuAdventures.Go","page":"Interface","title":"MenuAdventures.Go","text":"struct Go <: Action end\n\nGo in one of ExitDirections.\n\n\n\n\n\n","category":"type"},{"location":"#MenuAdventures.GoInto","page":"Interface","title":"MenuAdventures.GoInto","text":"struct GoInto <: Action end\n\nGo into something Immediate.\n\n\n\n\n\n","category":"type"},{"location":"#MenuAdventures.GoOnto","page":"Interface","title":"MenuAdventures.GoOnto","text":"struct GoOnto <: Action end\n\nGo onto something Immediate.\n\n\n\n\n\n","category":"type"},{"location":"#MenuAdventures.GrammaticalPerson","page":"Interface","title":"MenuAdventures.GrammaticalPerson","text":"@enum GrammaticalPerson first_person second_person third_person\n\nGrammatical person\n\n\n\n\n\n","category":"type"},{"location":"#MenuAdventures.Immediate","page":"Interface","title":"MenuAdventures.Immediate","text":"struct Immediate <: Domain end\n\nThing that are in/on the same place the player could more from.\n\n\n\n\n\n","category":"type"},{"location":"#MenuAdventures.Inventory","page":"Interface","title":"MenuAdventures.Inventory","text":"struct Inventory <: Domain end\n\nThings the player is carrying.\n\n\n\n\n\n","category":"type"},{"location":"#MenuAdventures.Leave","page":"Interface","title":"MenuAdventures.Leave","text":"struct Leave <: Action end\n\nLeave whatever the player is in/on.\n\n\n\n\n\n","category":"type"},{"location":"#MenuAdventures.ListInventory","page":"Interface","title":"MenuAdventures.ListInventory","text":"struct ListInventory <: Action end\n\nList the player's inventory.\n\n\n\n\n\n","category":"type"},{"location":"#MenuAdventures.Location","page":"Interface","title":"MenuAdventures.Location","text":"abstract type Location <: Noun end\n\nA location (room or door)\n\n\n\n\n\n","category":"type"},{"location":"#MenuAdventures.Lock","page":"Interface","title":"MenuAdventures.Lock","text":"struct Lock <: Action end\n\nLock something Reachable with something from your Inventory.\n\n\n\n\n\n","category":"type"},{"location":"#MenuAdventures.LookAround","page":"Interface","title":"MenuAdventures.LookAround","text":"struct LookAround <: Action end\n\nLook around.\n\n\n\n\n\n","category":"type"},{"location":"#MenuAdventures.LookAt","page":"Interface","title":"MenuAdventures.LookAt","text":"struct LookAt <: Action end\n\nLook at something Visible.\n\n\n\n\n\n","category":"type"},{"location":"#MenuAdventures.Noun","page":"Interface","title":"MenuAdventures.Noun","text":"abstract type Noun end\n\nNouns must have the following fields:\n\nname::String\nplural::Bool\ngrammatical_person::GrammaticalPerson\nindefinite_article::String\n\nThey are characterized by the following traits and methods:\n\never_possible\nget_description,\nis_providing_light,\nis_transparent,\nis_vehicle.\n\nSet indefinite_article to \"\" for proper nouns. The following IOContext components will be respected when showing nouns:\n\n:capitalize::Bool => false\n:known::Bool => true, set to false to include the indefinite article if it exists.\n:is_subject => true, whether the noun is the subject of the sentence. If this is set tofalse, you must also include\n:subject::Noun, the subject of the sentence.\n\nThere are a handful of unexported Noun sub-types included mostly for testing purposes:\n\nMenuAdventures.Box\nMenuAdventures.Car\nMenuAdventures.Clothes\nMenuAdventures.Door\nMenuAdventures.Key\nMenuAdventures.Lamp\nMenuAdventures.Person\nMenuAdventures.Table\n\nFeel free to use them if you want, but for the most part, you will likely want to make your own custom Noun subtypes for almost everything in your game.\n\n\n\n\n\n","category":"type"},{"location":"#MenuAdventures.Open","page":"Interface","title":"MenuAdventures.Open","text":"struct Open <: Action end\n\nOpen something Reachable.\n\n\n\n\n\n","category":"type"},{"location":"#MenuAdventures.Outfit","page":"Interface","title":"MenuAdventures.Outfit","text":"struct Outfit <: Domain end\n\nThings the player is wearing.\n\n\n\n\n\n","category":"type"},{"location":"#MenuAdventures.Push","page":"Interface","title":"MenuAdventures.Push","text":"struct Push <: Action end\n\nPush something Immediate in one of ExitDirections.\n\n\n\n\n\n","category":"type"},{"location":"#MenuAdventures.PutInto","page":"Interface","title":"MenuAdventures.PutInto","text":"struct PutInto <: Action end\n\nPut something from your Inventory into something Reachable.\n\n\n\n\n\n","category":"type"},{"location":"#MenuAdventures.PutOnto","page":"Interface","title":"MenuAdventures.PutOnto","text":"struct PutOnto <: Action end\n\nPut something from your Inventory onto something Reachable.\n\n\n\n\n\n","category":"type"},{"location":"#MenuAdventures.Quit","page":"Interface","title":"MenuAdventures.Quit","text":"struct Quit <: Action end\n\nQuit\n\n\n\n\n\n","category":"type"},{"location":"#MenuAdventures.Reachable","page":"Interface","title":"MenuAdventures.Reachable","text":"struct Reachable <: Domain end\n\nAnything the player can reach.\n\nPlayers can't reach through closed containers by default.\n\n\n\n\n\n","category":"type"},{"location":"#MenuAdventures.Relationship","page":"Interface","title":"MenuAdventures.Relationship","text":"@enum Relationship carrying containing incorporating supporting wearing\n\nRelationships show the relationshp of a thing to its parent_thing.\n\nA is carrying B means B is carried by A\nA is containing B means B is in A \nA is incorporating B means B is part of A \nA is supporting B means B is on top of A\nA is wearing B means B is worn by A\n\n\n\n\n\n","category":"type"},{"location":"#MenuAdventures.Say","page":"Interface","title":"MenuAdventures.Say","text":"struct Say <: Action end\n\nSay, to someone Visible, some Dialog.\n\n\n\n\n\n","category":"type"},{"location":"#MenuAdventures.Sentence","page":"Interface","title":"MenuAdventures.Sentence","text":"struct Sentence{Action}\n\nA sentence has two fields: action, the Action to tbe taken, and arguments, the arguments to the action. \n\nThe subject is implicitly universe.player.\n\n\n\n\n\n","category":"type"},{"location":"#MenuAdventures.Take","page":"Interface","title":"MenuAdventures.Take","text":"struct Take <: Action end\n\nTake something Reachable.\n\n\n\n\n\n","category":"type"},{"location":"#MenuAdventures.TakeOff","page":"Interface","title":"MenuAdventures.TakeOff","text":"struct TakeOff <: Action end\n\nTake off part of your Outfit.\n\n\n\n\n\n","category":"type"},{"location":"#MenuAdventures.TurnOff","page":"Interface","title":"MenuAdventures.TurnOff","text":"struct TurnOff <: Action end\n\nTurn off something Reachable.\n\n\n\n\n\n","category":"type"},{"location":"#MenuAdventures.TurnOn","page":"Interface","title":"MenuAdventures.TurnOn","text":"struct TurnOn <: Action end\n\nTurn on something Reachable.\n\n\n\n\n\n","category":"type"},{"location":"#MenuAdventures.Universe-Tuple{Any}","page":"Interface","title":"MenuAdventures.Universe","text":"function Universe(\n    player;\n    interface = terminal,\n    introduction = \"\",\n    relationships_graph = MetaGraph(DiGraph(), Label = Noun, EdgeMeta = Relationship),\n    directions_graph = MetaGraph(DiGraph(), Label = Location, EdgeMeta = Direction),\n    choices_log::Vector{Int}\n)\n\nThe universe contains a player, a text interface, an introduction, and the relationships between Nouns and [Location]s(@ref).\n\nThe player will typically have second_person as their GrammaticalPerson. The universe is organized as interlinking web of locations connected by Directions. Each location is the root of a Relationship tree.  Every noun should have one and only one parent (except for [Location]s(@ref)), which are at the root of trees and have no parent.\n\nYou can add a new thing to the universe, or change the location of something, by specifying its relation to another thing:\n\nuniverse[parent_thing, thing] = relationship\n\nYou can add a connection between locations too, optionally interspersed by a door:\n\nuniverse[parent_thing, destination, one_way = false] = direction\nuniverse[parent_thing, destination, one_way = false] = door, direction\n\nBy default, this will create a way back in the opposite direction. To suppress this, set one_way = true\n\n\n\n\n\n","category":"method"},{"location":"#MenuAdventures.Unlock","page":"Interface","title":"MenuAdventures.Unlock","text":"struct Unlock <: Action end\n\nUnlock something Reachable with something from your Inventory.\n\n\n\n\n\n","category":"type"},{"location":"#MenuAdventures.Verb-Tuple{Any}","page":"Interface","title":"MenuAdventures.Verb","text":"function Verb(base; third_person_singular_present = string(base, \"s\"))\n\nCreate an English verb.\n\nUse subject_to_verb to get the form of a verb to agree with a subject. Unexported verbs include MenuAdventures.DO, MenuAdventures.BE, and MenuAdventures.REPLY.\n\n\n\n\n\n","category":"method"},{"location":"#MenuAdventures.Visible","page":"Interface","title":"MenuAdventures.Visible","text":"struct Visible <: Domain end\n\nAnything the player can see.\n\nBy default, players can't see into closed, opaque containers.\n\n\n\n\n\n","category":"type"},{"location":"#MenuAdventures.Wear","page":"Interface","title":"MenuAdventures.Wear","text":"struct Wear <: Action end\n\nWear something from your Inventory.\n\n\n\n\n\n","category":"type"},{"location":"#MenuAdventures.argument_domains-Tuple{Union{Attach, Give}}","page":"Interface","title":"MenuAdventures.argument_domains","text":"function argument_domains(action::Action)\n\nA tuple of the Domains for each argument of an Action.\n\n\n\n\n\n","category":"method"},{"location":"#MenuAdventures.blocking-Tuple{Reachable,Any,Any,Any}","page":"Interface","title":"MenuAdventures.blocking","text":"blocking(domain, parent_thing, relationship, thing)\n\nparent_thing is blocked from accessing thing via the relationship.\n\nBy default, Reachable parent_things block things they are containing if they are closed. By default, Visible parent_things block things they are containing if they are closed and not is_transparent.\n\n\n\n\n\n","category":"method"},{"location":"#MenuAdventures.blocking_thing_and_relationship-Tuple{Any,Reachable}","page":"Interface","title":"MenuAdventures.blocking_thing_and_relationship","text":"function blocking_thing_and_relationship(universe, domain)\n\nStarting from the player, search upwards in the [Relationships] tree until a blocking relationship is reached, or until the root of the tree is reached. Return the blocking thing and the blocked relationship.\n\n\n\n\n\n","category":"method"},{"location":"#MenuAdventures.ever_possible-Tuple{Any,Any,Any}","page":"Interface","title":"MenuAdventures.ever_possible","text":"ever_possible(action::Action, domain::Domain, noun::Noun)\n\nWhether is is abstractly possible to apply an Action to a Noun from a particular Domain.\n\nFor whether it is concretely possible for the player in at a certain moment, see possible_now. Most possibilities default to false, with some exceptions:\n\never_possible(::PutInto, ::Inventory, _) = true\never_possible(::Drop, ::Inventory, _) = true\never_possible(::PutOnto, ::Inventory, _) = true\never_possible(::TakeOff, ::Outfit, _) = true\never_possible(action::TurnOff, domain::Reachable, noun) = \n    ever_possible(TurnOn(), domain, noun)\never_possible(action::Close, domain::Reachable, noun) = \n    ever_possible(Open(), domain, noun)\never_possible(action::Lock, domain::Reachable, noun) = \n    ever_possible(Unlock(), domain, noun)\never_possible(::Lock, domain::Inventory, noun) = \n    ever_possible(Unlock(), domain, noun)\n\nCertain possibilities come with required fields:\n\never_possible(::TurnOn, ::Reachable, noun) requires that noun has a mutable on::Bool field.\never_possible(::Open, ::Reachable, noun requires that noun has a mutable closed::Bool field.\never_possible(::Unlock, ::Reachable, noun) requires that noun has a key::Noun field and a mutable locked::Bool field.\never_possible(::Take, ::Reachable, noun) requires that noun has a mutable handled::Bool field.\never_possible(::Say, ::Visible, noun) requires thatnounhave adialog::OrderedDict{String, Answer}` field. \n\nFor dialog, the keys will be things you can say, and answers will be replies, with the answer objects being function triggers that will be called with no arguments.  Dialog options will be removed after usage.\n\n\n\n\n\n","category":"method"},{"location":"#MenuAdventures.get_children_relationships-Tuple{Any,Any}","page":"Interface","title":"MenuAdventures.get_children_relationships","text":"function get_children_relationships(universe, parent_thing)\n\nGet the children of parent_thing in the universe, and the Relationships of parent_thing to them.\n\n\n\n\n\n","category":"method"},{"location":"#MenuAdventures.get_description-Tuple{Any,Noun}","page":"Interface","title":"MenuAdventures.get_description","text":"get_description(universe, thing::Noun) = thing.description\n\nGet the description of a thing.\n\nUnless you overload get_description, nouns are required to have a description field.\n\n\n\n\n\n","category":"method"},{"location":"#MenuAdventures.get_exit_directions-Tuple{Any,Any}","page":"Interface","title":"MenuAdventures.get_exit_directions","text":"function get_exit_directions(universe, location)\n\nGet the exits from location, and the Directions to them.\n\n\n\n\n\n","category":"method"},{"location":"#MenuAdventures.get_final_destination-Tuple{Any,Any}","page":"Interface","title":"MenuAdventures.get_final_destination","text":"function get_final_destination(universe, direction)\n\nGet the final destination if universe.player moves in direction.  Players always continue through doors to a new final destination.\n\n\n\n\n\n","category":"method"},{"location":"#MenuAdventures.get_first_destination-Tuple{Any,Any}","page":"Interface","title":"MenuAdventures.get_first_destination","text":"function get_first_destination(universe, direction)\n\nGet the first destination if universe.player moves in direction (a location or a door).\n\n\n\n\n\n","category":"method"},{"location":"#MenuAdventures.get_mover-Tuple{Any}","page":"Interface","title":"MenuAdventures.get_mover","text":"function get_mover(universe)\n\nReturn the thing that can move: either the player, or the vehicle the player is in, if it is_vehicle.\n\n\n\n\n\n","category":"method"},{"location":"#MenuAdventures.get_parent-Tuple{Any,Any}","page":"Interface","title":"MenuAdventures.get_parent","text":"function get_parent(universe, thing)\n\nGet the parent of thing in the universe.\n\n\n\n\n\n","category":"method"},{"location":"#MenuAdventures.get_parent_relationship-Tuple{Any,Any}","page":"Interface","title":"MenuAdventures.get_parent_relationship","text":"function get_parent_relationship(universe, thing)\n\nGet the parent of thing in the universe, and the Relationship of thing to it.\n\n\n\n\n\n","category":"method"},{"location":"#MenuAdventures.is_providing_light-Tuple{Noun}","page":"Interface","title":"MenuAdventures.is_providing_light","text":"is_providing_light(::Noun) = false\n\nWhether something provides its own light. Naturally lit locations and light sources both are providing light.\n\n\n\n\n\n","category":"method"},{"location":"#MenuAdventures.is_transparent-Tuple{Noun}","page":"Interface","title":"MenuAdventures.is_transparent","text":"is_transparent(thing::Noun) = false\n\nWhether you can see through thing into its contents.\n\n\n\n\n\n","category":"method"},{"location":"#MenuAdventures.is_vehicle-Tuple{Noun}","page":"Interface","title":"MenuAdventures.is_vehicle","text":"is_vehicle(::Noun) = false\n\nWhether something is a vehicle.\n\n\n\n\n\n","category":"method"},{"location":"#MenuAdventures.opposite-Tuple{Direction}","page":"Interface","title":"MenuAdventures.opposite","text":"function opposite(direction::Direction)\n\nThe opposite of a direction.\n\n\n\n\n\n","category":"method"},{"location":"#MenuAdventures.possible_now-NTuple{4,Any}","page":"Interface","title":"MenuAdventures.possible_now","text":"possible_now(universe, sentence, domain, thing)\n\nWhether it is currently possible to apply sentence.action to a thing in a domain.\n\nSee ever_possible for a more abstract possibility. sentence will contain already chosen arguments, should you wish to access them.\n\n\n\n\n\n","category":"method"},{"location":"#MenuAdventures.possible_now-Tuple{Any,Any}","page":"Interface","title":"MenuAdventures.possible_now","text":"possible_now(universe, action)\n\nWhether it is possible to conduct an action. Defaults to true; you can set to false for some actions without arguments.\n\n\n\n\n\n","category":"method"},{"location":"#MenuAdventures.print_sentence-Tuple{Any,Attach,Any,Any}","page":"Interface","title":"MenuAdventures.print_sentence","text":"function print_sentence(io, action::Action, argument_texts...)\n\nPrint a sentence to io. This allows for adding connectives like with.\n\n\n\n\n\n","category":"method"},{"location":"#MenuAdventures.string_in_color-Tuple{Symbol,Vararg{Any,N} where N}","page":"Interface","title":"MenuAdventures.string_in_color","text":"function string_in_color(color::Symbol, arguments...)\n\nUse ASCII escape codes add a color to the arguments collected as a string.\n\n\n\n\n\n","category":"method"},{"location":"#MenuAdventures.subject_to_verb-Tuple{Any,Any}","page":"Interface","title":"MenuAdventures.subject_to_verb","text":"subject_to_verb(subject, verb)\n\nFind the Verb form to agree with a subject.\n\n\n\n\n\n","category":"method"},{"location":"#MenuAdventures.turn!-Tuple{Any}","page":"Interface","title":"MenuAdventures.turn!","text":"turn!(universe; introduce = false)\n\nStart a turn in the Universe, and keep going until the user wins or quits.\n\n\n\n\n\n","category":"method"}]
}
